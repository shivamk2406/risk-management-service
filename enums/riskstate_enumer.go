// Code generated by "enumer -type=RiskState -json"; DO NOT EDIT.

package enums

import (
	"encoding/json"
	"fmt"
	"strings"
)

const _RiskStateName = "UnspecifiedTenantRequestOPENCLOSEDACCEPTEDINVESTIGATING"

var _RiskStateIndex = [...]uint8{0, 24, 28, 34, 42, 55}

const _RiskStateLowerName = "unspecifiedtenantrequestopenclosedacceptedinvestigating"

func (i RiskState) String() string {
	if i < 0 || i >= RiskState(len(_RiskStateIndex)-1) {
		return fmt.Sprintf("RiskState(%d)", i)
	}
	return _RiskStateName[_RiskStateIndex[i]:_RiskStateIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _RiskStateNoOp() {
	var x [1]struct{}
	_ = x[UnspecifiedTenantRequest-(0)]
	_ = x[OPEN-(1)]
	_ = x[CLOSED-(2)]
	_ = x[ACCEPTED-(3)]
	_ = x[INVESTIGATING-(4)]
}

var _RiskStateValues = []RiskState{UnspecifiedTenantRequest, OPEN, CLOSED, ACCEPTED, INVESTIGATING}

var _RiskStateNameToValueMap = map[string]RiskState{
	_RiskStateName[0:24]:       UnspecifiedTenantRequest,
	_RiskStateLowerName[0:24]:  UnspecifiedTenantRequest,
	_RiskStateName[24:28]:      OPEN,
	_RiskStateLowerName[24:28]: OPEN,
	_RiskStateName[28:34]:      CLOSED,
	_RiskStateLowerName[28:34]: CLOSED,
	_RiskStateName[34:42]:      ACCEPTED,
	_RiskStateLowerName[34:42]: ACCEPTED,
	_RiskStateName[42:55]:      INVESTIGATING,
	_RiskStateLowerName[42:55]: INVESTIGATING,
}

var _RiskStateNames = []string{
	_RiskStateName[0:24],
	_RiskStateName[24:28],
	_RiskStateName[28:34],
	_RiskStateName[34:42],
	_RiskStateName[42:55],
}

// RiskStateString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func RiskStateString(s string) (RiskState, error) {
	if val, ok := _RiskStateNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _RiskStateNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to RiskState values", s)
}

// RiskStateValues returns all values of the enum
func RiskStateValues() []RiskState {
	return _RiskStateValues
}

// RiskStateStrings returns a slice of all String values of the enum
func RiskStateStrings() []string {
	strs := make([]string, len(_RiskStateNames))
	copy(strs, _RiskStateNames)
	return strs
}

// IsARiskState returns "true" if the value is listed in the enum definition. "false" otherwise
func (i RiskState) IsARiskState() bool {
	for _, v := range _RiskStateValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for RiskState
func (i RiskState) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for RiskState
func (i *RiskState) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("RiskState should be a string, got %s", data)
	}

	var err error
	*i, err = RiskStateString(s)
	return err
}
